setwd("C:/Users/alejandro.suarez/Desktop/Webscrapping/My_webscrapping")
library(shiny)
runApp('Suarez_Otero_Alejandro_Final_project')
rm(list = ls())
shiny::runGitHub( "School_projects/Suarez_Otero_Alejandro_Final_project", "alexsuarez94")
shiny::runUrl( "https://github.com/alexsuarez94/School_projects/tree/master/Suarez_Otero_Alejandro_Final_project")
shiny::runGitHub( "School_projects/Suarez_Otero_Alejandro_Final_project", "alexsuarez94")
shiny::runGitHub( "alexsuarez94/School_projects/Suarez_Otero_Alejandro_Final_project")
shiny::runGitHub( "alexsuarez94/School_projects")
library(jsonlite)
library(rvest)
library(httr)
library(dplyr)
#create a vector with the top players
selected_players <- c("James, LeBron", "Harden, James", "Curry, Stephen", "Durant, Kevin")
#select url after search in the web browser
players_url = "http://stats.nba.com/stats/commonallplayers?LeagueID=00&Season=2015-16&IsOnlyCurrentSeason=0"
#setting up the connection
request_headers = c(
"accept-encoding" = "gzip, deflate, sdch",
"accept-language" = "en-US,en;q=0.8",
"cache-control" = "no-cache",
"connection" = "keep-alive",
"host" = "stats.nba.com",
"pragma" = "no-cache",
"upgrade-insecure-requests" = "1",
"user-agent" = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9"
)
#making a request of data with package jsonlite()
request = GET(players_url, add_headers(request_headers))
players_data = jsonlite::fromJSON(content(request, as = "text"))
#select the fundamental part of the list
players = tbl_df(data.frame(players_data$resultSets$rowSet[[1]], stringsAsFactors = FALSE))
names(players) = tolower(players_data$resultSets$headers[[1]])
players = mutate(players,
person_id = as.numeric(person_id),
rosterstatus = as.logical(as.numeric(rosterstatus)),
from_year = as.numeric(from_year),
to_year = as.numeric(to_year),
team_id = as.numeric(team_id)
)
top_players <- tbl_df(matrix(0L, nrow = 4, ncol = 13))
for (i in 1:length(selected_players)){
top_players[i, ]  <- dplyr::filter(players, grepl(selected_players[i], display_last_comma_first))
}
names(top_players) <- names(players)
top_players
player_id <- top_players$person_id
player_photo_url = function(player_id) {
paste0("http://stats.nba.com/media/players/230x185/", player_id, ".png")
}
player_photo <- sapply(player_id, player_photo_url)
top_players <- top_players[, c(2, 5, 11)]
top_players
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# If the package is not installed then it will be installed
libraries <- c("jsonlite", "rjson", "plyr", "dplyr")
check.libraries <- is.element(libraries,
installed.packages()[, 1])==FALSE
libraries.to.install <- libraries[check.libraries]
if (length(libraries.to.install!=0)) {
install.packages(libraries.to.install)
}
success <- sapply(libraries,require, quietly = FALSE,  character.only = TRUE)
if(length(success) != length(libraries)) {stop("A package failed to return a success in require() function.")}
#create a vector with the top players
selected_players <- c("James, LeBron", "Harden, James", "Curry, Stephen", "Durant, Kevin")
#select url after search in the web browser
players_url = "http://stats.nba.com/stats/commonallplayers?LeagueID=00&Season=2015-16&IsOnlyCurrentSeason=0"
#setting up the connection
request_headers = c(
"accept-encoding" = "gzip, deflate, sdch",
"accept-language" = "en-US,en;q=0.8",
"cache-control" = "no-cache",
"connection" = "keep-alive",
"host" = "stats.nba.com",
"pragma" = "no-cache",
"upgrade-insecure-requests" = "1",
"user-agent" = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9"
)
#making a request of data with package jsonlite()
request = GET(players_url, add_headers(request_headers))
players_data = jsonlite::fromJSON(content(request, as = "text"))
#select the fundamental part of the list
players = tbl_df(data.frame(players_data$resultSets$rowSet[[1]], stringsAsFactors = FALSE))
names(players) = tolower(players_data$resultSets$headers[[1]])
players = mutate(players,
person_id = as.numeric(person_id),
rosterstatus = as.logical(as.numeric(rosterstatus)),
from_year = as.numeric(from_year),
to_year = as.numeric(to_year),
team_id = as.numeric(team_id)
)
top_players <- tbl_df(matrix(0L, nrow = 4, ncol = 13))
for (i in 1:length(selected_players)){
top_players[i, ]  <- dplyr::filter(players, grepl(selected_players[i], display_last_comma_first))
}
names(top_players) <- names(players)
player_id <- top_players$person_id
player_id
names(top_players)
tab1 <- rbind(selected_players, player_id)
(tab1 <- rbind(selected_players, player_id))
rm(tab 1)
rm(tab1)
player_id <- as.data.frame(top_players$person_id)
names(player_id) <- selected_players
player_id
player_id$name <- selected_players
names(player_id) <- c("Player ID", "Short Name")
# If the package is not installed then it will be installed
libraries <- c("jsonlite", "rjson", "plyr", "dplyr", "kableExtra")
check.libraries <- is.element(libraries,
installed.packages()[, 1])==FALSE
libraries.to.install <- libraries[check.libraries]
if (length(libraries.to.install!=0)) {
install.packages(libraries.to.install)
}
success <- sapply(libraries,require, quietly = FALSE,  character.only = TRUE)
if(length(success) != length(libraries)) {stop("A package failed to return a success in require() function.")}
kable(player_id) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
player_id
# shot data for Stephen Curry
playerID <- player_id$`Player ID`[1]
season <- c("2014-15")
# scrapping data from JSON database with rjson() package
shotData <- rep( list(rep(list(list()), length(season))), length(playerID) )
for (i in 1:length(playerID)){
for (j in 1:length(season)){
shotData[[i]][[j]] <- rjson::fromJSON(file = paste0("http://stats.nba.com/stats/shotchartdetail?Period=0&VsConference=&LeagueID=
00&LastNGames=0&TeamID=0&Position=&Location=&Outcome=&ContextMeasure=FGA&DateFrom=&StartPeriod=
&DateTo=&OpponentTeamID=0&ContextFilter=&RangeType=&Season=",season[j],"&AheadBehind=&PlayerID=", playerID[i],"&EndRange=
&VsDivision=&PointDiff=&RookieYear=&GameSegment=&Month=0&ClutchTime=&StartRange=&EndPeriod=&SeasonType=Regular
+Season&SeasonSegment=&GameID=&PlayerPosition=", sep = ""), method="C")
}
}
#preprocessing data
shotDataf <- rep( list(rep(list(list()), length(season))), length(playerID) )
# unlist shot data, save into a data frame
for (i in 1:length(playerID)){
for (j in 1:length(season)){
shotDataf[[i]][[j]] <- data.frame(matrix(unlist(shotData[[i]][[j]]$resultSets[[1]][[3]]), ncol=24, byrow = TRUE))
# shot data headers
colnames(shotDataf[[i]][[j]]) <- shotData[[i]][[j]]$resultSets[[1]][[2]]
# covert x and y coordinates into numeric to plot them in court charts.
shotDataf[[i]][[j]]$LOC_X <- as.numeric(as.character(shotDataf[[i]][[j]]$LOC_X))
shotDataf[[i]][[j]]$LOC_Y <- as.numeric(as.character(shotDataf[[i]][[j]]$LOC_Y))
shotDataf[[i]][[j]]$SHOT_DISTANCE <- as.numeric(as.character(shotDataf[[i]][[j]]$SHOT_DISTANCE))
}
}
shotDataf[[1]][[1]]
dim(shotDataf[[1]][[1]])
tab1 <- head(shotDataf[[1]][[1]], 10)
tab1
tab1 <- head(shotDataf[[1]][[1]], 10)[ , c(3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)]
tab 1
tab1
kable(tab1) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
kable(tab1[, 1:6]) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
kable(tab1[, 7:12]) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
load("data/df_lbj.RData")
df_bj
df_lbj
load("data/lebron_stats.RData")
lebron_stats
load("data/lebron_stats.RData")
lebron_stats
df_lbj
load("data/lebron_stats.RData")
kable(df_lbj) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
load("data/lebron_stats.RData")
kable(df_lbj) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
load("data/lbj_bio.RData")
load("data/lbj_bio.RData")
kable(lbj_bio) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
source("ggplot_func/theme_black_ggplot.R")
data <- shotDataf[[1]][[1]][which(!shotDataf[[1]][[1]]$SHOT_ZONE_BASIC=='Restricted Area'), ]
data
court <- rasterGrob(readJPEG("images/court3.jpeg"),
width=unit(1,"npc"), height=unit(1.2,"npc"))
# If the package is not installed then it will be installed
libraries <- c("jsonlite", "rjson", "plyr", "dplyr", "kableExtra", "hexbin", "jpeg", "RCurl", "grid")
check.libraries <- is.element(libraries,
installed.packages()[, 1])==FALSE
libraries.to.install <- libraries[check.libraries]
if (length(libraries.to.install!=0)) {
install.packages(libraries.to.install)
}
success <- sapply(libraries,require, quietly = FALSE,  character.only = TRUE)
if(length(success) != length(libraries)) {stop("A package failed to return a success in require() function.")}
court <- rasterGrob(readJPEG("images/court3.jpeg"),
width=unit(1,"npc"), height=unit(1.2,"npc"))
ggplot(data, aes(x=LOC_X, y=LOC_Y)) +
annotation_custom(court, -250, 250, -52, 418) +
stat_binhex(bins = 35, colour = "black", alpha = 0.8) +
scale_fill_gradientn(colours = c("yellow", "darkgoldenrod1","orange", "orangered4","red", "darkred", "black")) +
guides(alpha = FALSE, size = FALSE) +
xlim(250, -250) +
ylim(-52, 418) +
ggtitle(paste("Shot Chart\n", unique(data$PLAYER_NAME), sep = "")) +
theme_black()
# If the package is not installed then it will be installed
libraries <- c("jsonlite", "rjson", "plyr", "dplyr", "kableExtra", "hexbin", "jpeg", "RCurl", "grid", "ggplot2")
check.libraries <- is.element(libraries,
installed.packages()[, 1])==FALSE
libraries.to.install <- libraries[check.libraries]
if (length(libraries.to.install!=0)) {
install.packages(libraries.to.install)
}
success <- sapply(libraries,require, quietly = FALSE,  character.only = TRUE)
if(length(success) != length(libraries)) {stop("A package failed to return a success in require() function.")}
ggplot(data, aes(x=LOC_X, y=LOC_Y)) +
annotation_custom(court, -250, 250, -52, 418) +
stat_binhex(bins = 35, colour = "black", alpha = 0.8) +
scale_fill_gradientn(colours = c("yellow", "darkgoldenrod1","orange", "orangered4","red", "darkred", "black")) +
guides(alpha = FALSE, size = FALSE) +
xlim(250, -250) +
ylim(-52, 418) +
ggtitle(paste("Shot Chart\n", unique(data$PLAYER_NAME), sep = "")) +
theme_black()
source("ggplot_func/theme_black_ggplot.R")
data <- shotDataf[[1]][[1]][which(!shotDataf[[1]][[1]]$SHOT_ZONE_BASIC=='Restricted Area'), ]
court <- rasterGrob(readJPEG("images/court3.jpeg"),
width=unit(1,"npc"), height=unit(1.2,"npc"))
# plot shots using ggplot, hex bins, NBA court backgroung image.
ggplot(data, aes(x=LOC_X, y=LOC_Y)) +
annotation_custom(court, -250, 250, -52, 418) +
stat_binhex(bins = 35, colour = "black", alpha = 0.8) +
scale_fill_gradientn(colours = c("yellow", "darkgoldenrod1","orange", "orangered4","red", "darkred", "black")) +
guides(alpha = FALSE, size = FALSE) +
xlim(250, -250) +
ylim(-52, 418) +
ggtitle(paste("Shot Chart\n", unique(data$PLAYER_NAME), sep = "")) +
theme_black()
# plot using NBA court background and colour by shot zone
ggplot(data, aes(x=LOC_X, y=LOC_Y)) +
annotation_custom(court, -250, 250, -50, 420) +
geom_point(aes(colour = SHOT_ZONE_BASIC, shape = EVENT_TYPE), size = 2.5) +
xlim(250, -250) +
ylim(-50, 420) +
ggtitle(paste("Shot Chart\n", unique(data$PLAYER_NAME), sep = "")) +
theme_black()
